// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user_api.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/go-jimu/template/pkg/gen/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserAPIName is the fully-qualified name of the UserAPI service.
	UserAPIName = "user.v1.UserAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserAPIGetProcedure is the fully-qualified name of the UserAPI's Get RPC.
	UserAPIGetProcedure = "/user.v1.UserAPI/Get"
)

// UserAPIClient is a client for the user.v1.UserAPI service.
type UserAPIClient interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
}

// NewUserAPIClient constructs a client for the user.v1.UserAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userAPIMethods := v1.File_user_v1_user_api_proto.Services().ByName("UserAPI").Methods()
	return &userAPIClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+UserAPIGetProcedure,
			connect.WithSchema(userAPIMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userAPIClient implements UserAPIClient.
type userAPIClient struct {
	get *connect.Client[v1.GetRequest, v1.GetResponse]
}

// Get calls user.v1.UserAPI.Get.
func (c *userAPIClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// UserAPIHandler is an implementation of the user.v1.UserAPI service.
type UserAPIHandler interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
}

// NewUserAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserAPIHandler(svc UserAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userAPIMethods := v1.File_user_v1_user_api_proto.Services().ByName("UserAPI").Methods()
	userAPIGetHandler := connect.NewUnaryHandler(
		UserAPIGetProcedure,
		svc.Get,
		connect.WithSchema(userAPIMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserAPIGetProcedure:
			userAPIGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedUserAPIHandler struct{}

func (UnimplementedUserAPIHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserAPI.Get is not implemented"))
}
